package am.dproc.sms.controllers;

import java.time.LocalDateTime;
import javax.servlet.http.HttpSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import am.dproc.sms.models.Student;
import am.dproc.sms.models.UserPrincipal;
import am.dproc.sms.services.interfaces.StudentService;
import org.springframework.web.bind.annotation.RequestParam;
import am.dproc.sms.models.Student;

@Controller
public class LoginController {

	@Autowired
	StudentService studentService;
	
	@RequestMapping(value = {"/", "home"})
	public String home(Authentication auth, Model model, HttpSession session) {
		System.out.println("=========>>"+currentTime()+">>>>>>>>>>>>>>>>>>>>>inside home");
		System.out.println("=====Session id====>>"+session.getId());
		System.out.println(auth);
		
		if(auth != null) {
			UserPrincipal user = (UserPrincipal) auth.getPrincipal();
			System.out.println("=====Logged in user id====>>"+user.getId());
			model.addAttribute("user",user);
			return "/home";
		}
		return "redirect:/login";
	}

	@RequestMapping(value = "/login", method = RequestMethod.GET)
	public String login() {
		return "login";
	}
	
	@GetMapping("welcome")
	public String welcome() {
		System.out.println("========="+currentTime()+">>>>>>>>>>>>>>>>>>>>>>>inside welcome");
		return "/welcome";
	}

	@GetMapping("teacher")
	public String teacher() {
		logTime();
		System.out.println("=========>>"+currentTime()+">>>>>>>>>>>>>>>>inside teacher");
		return "/teacher";
	}

	@GetMapping("student")
	public String student() {
		logTime();
		System.out.println("=========>>"+currentTime()+">>>>>>>>>>>>>>>>inside teacher");
		return "/student";
	}

	@GetMapping(value = "registration")
	public String registration(Model model) {
		if(!model.containsAttribute("user")) {
			model.addAttribute("user", new Student());
		}
		return "/registration";
	}

//	@PostMapping(value = "registration")
//	public String register(@ModelAttribute Student student) throws IllegalArgumentException, IllegalAccessException {
//		Field[] fields = student.getClass().getDeclaredFields();
//		for (int i = 0; i < fields.length; i++) {
//			Field field = fields[i];
//			String fieldName = field.getName();
//			Object value = field.get(student);
//			System.out.println("field: "+fieldName + " value: "+value );
//		}
//
//		return "/registration";
//	}

	@PostMapping(value = "registration")
	public String register(@ModelAttribute Student student, Model model) {
		int id = studentService.addStudent(student);
		if(id>0) {
			model.addAttribute("message", "You have successfully registered.\nAutogenerated password was sent to your email.");
			return "redirect:/login";
		} else if(id == 0) {
			model.addAttribute("message", "User with this email already exists.");
		} else {
			model.addAttribute("message", "User was not created.");
		}
		return registration(model);
	}
	
	@RequestMapping(value = "user")
	@ResponseBody
	public String user() {
		return ("<h1>Welcome User</h1>");
	}

	@RequestMapping(value = "admin")
	@ResponseBody
	public String admin() {
		return ("<h1>Welcome Admin</h1>");
	}

	// todo delete time utils
	private void logTime() {
		System.out.println(currentTime());;
	}

	private String currentTime() {
		return LocalDateTime.now().toString().replace("T", " ");
	}

}
