package am.dproc.sms.rest;


import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;

import javax.ws.rs.Consumes;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.web.bind.annotation.RestController;

import am.dproc.sms.models.AuthenticationRequest;
import am.dproc.sms.models.AuthenticationResponse;
import am.dproc.sms.services.impl.JwtUtil;
import am.dproc.sms.services.interfaces.StudentService;
import io.swagger.annotations.Api;

@RestController
@Path("/authenticate")
@Api(value = "AuthController")
public class AuthController {

	@Autowired
	StudentService studentService;
	
	@Autowired
	AuthenticationManager authenticationManager;
	
	@Autowired 
	UserDetailsService userDetailsService;
	
	@Autowired
	JwtUtil jwtTokenUtil;
	
	@POST
//	@Path("/authenticate")
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON)
	public Response createAuthenticationToken(AuthenticationRequest authenticationRequest) throws Exception {
			try {
				authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(authenticationRequest.getUsername(), authenticationRequest.getPassword()));
			} catch (BadCredentialsException e) {
				throw new Exception("Incorrect username or password",e);
			}
			final UserDetails userDetails = userDetailsService.loadUserByUsername(authenticationRequest.getUsername());
			final String jwt = jwtTokenUtil.generateToken(userDetails);
//			Map<String,String> token = new HashMap<>();
//			token.put("jwt", jwt);
			return Response.status(Response.Status.OK).entity(new AuthenticationResponse(jwt)).build();
	}
	
	
	
//	
//	@RequestMapping(value = {"/", "home"})
//	public String home(Authentication auth, Model model, HttpSession session) {
//		System.out.println("=========>>"+currentTime()+">>>>>>>>>>>>>>>>>>>>>inside home");
//		System.out.println("=====Session id====>>"+session.getId());
//		System.out.println(auth);
//		
//		if(auth != null) {
//			UserPrincipal user = (UserPrincipal) auth.getPrincipal();
//			System.out.println("=====Logged in user id====>>"+user.getId());
//			model.addAttribute("user",user);
//			return "/home";
//		}
//		return "redirect:/login";
//	}


//	@PostMapping(value = "registration")
//	public String register(@ModelAttribute Student student) throws IllegalArgumentException, IllegalAccessException {
//		Field[] fields = student.getClass().getDeclaredFields();
//		for (int i = 0; i < fields.length; i++) {
//			Field field = fields[i];
//			String fieldName = field.getName();
//			Object value = field.get(student);
//			System.out.println("field: "+fieldName + " value: "+value );
//		}
//
//		return "/registration";
//	}

//	@POST
//	@Path("registration")
//	@Consumes(MediaType.APPLICATION_JSON)
//	@Produces(MediaType.APPLICATION_JSON)
//	public Response register(Student student) {
//		int id = studentService.addStudent(student);
//		Map<String, String> message = new HashMap<>();
//		message.put("message", String.format("User with email %s already exists", admin.getEmail()));
//
//		if(id>0) {
//			model.addAttribute("message", "You have successfully registered.\nAutogenerated password was sent to your email.");
//			return "redirect:/login";
//		} else if(id == 0) {
//			model.addAttribute("message", "User with this email already exists.");
//		} else {
//			model.addAttribute("message", "User was not created.");
//		}
//		return registration(model);
//		return null;
//	}
	

	// todo delete time utils
	private void logTime() {
		System.out.println(currentTime());;
	}

	private String currentTime() {
		return LocalDateTime.now().toString().replace("T", " ");
	}

	
//	{
//		  "firstname": "Narek",
//		  "lastname": "Malkhasyan",
//		  "email": "narekmalkhasyan@mail.ru",
//		  "password": 123,
//		  "studentInfo": {
//		    "passportId": "AK5824974",
//		    "socialCardId": "00045821957",
//		    "birthDate": 4840002545215,
//		    "phoneNumber": "+37495821474",
//		    "address": "28 Sayat-Nova Yerevan",
//		    "imageUrl": "/img/std/847.jpg",
//		    "gender": 1
//		  }
//		}
//		oczjHiKfWQIO
	
	
	
	
	
	
}
